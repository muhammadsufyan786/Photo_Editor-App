import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.primary,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.indigo800,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(14.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 6,
        space: 6,
        color: colorScheme.onPrimary,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.gray400,
          fontSize: 14.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray600,
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        displayLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 53.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w700,
        ),
        displayMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 49.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w700,
        ),
        headlineLarge: TextStyle(
          color: appTheme.purpleA40003,
          fontSize: 31.fSize,
          fontFamily: 'Lato',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: appTheme.purpleA40003,
          fontSize: 26.fSize,
          fontFamily: 'Lato',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: Color(0XFFFD01CC),
          fontSize: 25.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: appTheme.blueGray90001,
          fontSize: 12.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 22.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray700,
          fontSize: 18.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: Color(0XFF2F2F2F),
          fontSize: 14.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFFFFFFF),
    primaryContainer: Color(0XFF555151),

    // Error colors
    errorContainer: Color(0XFF2BC0E4),
    onErrorContainer: Color(0XFF252525),

    // On colors(text colors)
    onPrimary: Color(0XFF2C2D45),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGrayf
  Color get blueGray1007f => Color(0X7FD9D9D9);

  // BlueGray
  Color get blueGray900 => Color(0XFF242E42);
  Color get blueGray90001 => Color(0XFF2F2F2F);

  // DeepOrange
  Color get deepOrangeA100 => Color(0XFFF3A183);

  // DeepPurple
  Color get deepPurple800 => Color(0XFF40309D);
  Color get deepPurpleA200 => Color(0XFF9042F6);

  // Gray
  Color get gray100 => Color(0XFFF4F9F8);
  Color get gray10001 => Color(0XFFF6F6F6);
  Color get gray10002 => Color(0XFFF7F7F7);
  Color get gray300 => Color(0XFFE6E6E6);
  Color get gray30001 => Color(0XFFDADADA);
  Color get gray30002 => Color(0XFFE3E3E5);
  Color get gray400 => Color(0XFFC8C7CC);
  Color get gray500 => Color(0XFF9C9C9C);
  Color get gray50001 => Color(0XFFABABAB);
  Color get gray600 => Color(0XFF727272);
  Color get gray60001 => Color(0XFF6F6F6F);
  Color get gray700 => Color(0XFF636363);
  Color get gray800 => Color(0XFF3C3C3C);

  // Indigo
  Color get indigo700 => Color(0XFF38339B);
  Color get indigo70001 => Color(0XFF35339A);
  Color get indigo800 => Color(0XFF333399);
  Color get indigoA200 => Color(0XFF536AFF);

  // IndigoACc
  Color get indigoA200Cc => Color(0XCC625EFF);

  // Lime
  Color get lime100 => Color(0XFFEAECC6);

  // Pink
  Color get pink300 => Color(0XFFF857A6);
  Color get pinkA200 => Color(0XFFFF4D83);

  // Purple
  Color get purple100 => Color(0XFFDFC6F7);
  Color get purpleA400 => Color(0XFFF603CA);
  Color get purpleA40001 => Color(0XFFFC01CC);
  Color get purpleA40002 => Color(0XFFFD01CC);
  Color get purpleA40003 => Color(0XFFFF00CC);

  // PurpleACc
  Color get purpleA200Cc => Color(0XCCFF41DA);

  // Red
  Color get red300 => Color(0XFFEC6F66);
  Color get red50 => Color(0XFFFFF0F0);
  Color get red500 => Color(0XFFEA4335);
  Color get red50001 => Color(0XFFF44236);
  Color get redA200 => Color(0XFFFF5858);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
